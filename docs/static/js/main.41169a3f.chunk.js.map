{"version":3,"sources":["components/AddCategory.jsx","components/GifGridItem.jsx","helpers/GetGifs.js","components/GifGrid.jsx","hooks/useFetchGifs.js","components/GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","categories","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","map","img","images","original","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","divRoot","document","querySelector","ReactDOM","render"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGVC,mBAAS,IAHC,mBAGvCC,EAHuC,KAG3BC,EAH2B,KAiB9C,OACI,qCACI,kDACA,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBAECJ,IACCF,GAAc,SAAAO,GAAU,OAAKL,GAAL,mBAAoBK,OAC5CJ,EAAc,MAMd,SACI,uBACIK,KAAK,OACLC,MAAOP,EACPQ,SAnBU,SAACL,GACvBF,EAAc,CAACE,EAAEM,OAAOF,iB,QCPnBG,EAAc,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEpC,OACI,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNDK,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,4DAEJ,mCACD,GACRN,EAJa,uDAEJ,mCAFI,cAIqDO,UAAUF,GAJ/D,kBAGL,IAHK,SAKAG,MAAMR,GALN,cAKbS,EALa,gBAOIA,EAAKC,KAAKD,GAPd,uBAOXE,EAPW,EAOXA,KAPW,kBASZA,EAAKC,KAAI,SAAAC,GAAQ,IAAD,EACnB,MAAO,CACHf,GAAIe,EAAIf,GACRC,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIC,cAAN,aAAE,EAAYC,SAASf,SAbf,4CAAH,sDCGPgB,EAAU,SAAC,GAAkB,IAAhBX,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACZnB,mBAAS,CAC/ByB,KAAM,GACNM,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAgBtC,OAVAC,qBAAU,WACNhB,EAAQC,GACHgB,MAAK,SAAAC,GACFH,EAAS,CACLR,KAAMW,EACNL,SAAS,SAGtB,CAACZ,IAEGa,EDbwBK,CAAalB,GAAhCS,EAFyB,EAE9BH,KAAaM,EAFiB,EAEjBA,QAEpB,OACI,qCACI,6BAAKZ,IACHY,GAAW,2CACb,qBAAKhB,UAAU,YAAf,SAGQa,EAAOF,KAAI,SAAAC,GACP,OAAO,cAAC,EAAD,eAECA,GADCA,EAAIf,aEbxB0B,EAAe,WAAO,IAAD,EAEMtC,mBAAS,IAFf,mBAEvBM,EAFuB,KAEXP,EAFW,KAI9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGIO,EAAWoB,KAAI,SAAAP,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,UCZvBoB,EAAUC,SAASC,cAAc,SAEvCC,IAASC,OAAO,cAAC,EAAD,IAAkBJ,K","file":"static/js/main.41169a3f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    // mantener el estado dl input\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue([e.target.value])\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue){\r\n            setCategories(categories => [inputValue, ...categories])\r\n            setInputValue('');\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <h5>Search gifs for:</h5>\r\n            <form onSubmit={ handleSubmit }>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </form>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n          <img src={url} alt={title} />\r\n          <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","\r\nexport const getGifs = async (category) => {\r\n    \r\n    const apiKey = 'Zv7Hcjmk7QPrOKr0SNcdJwn8qII59OsE'\r\n    const limit = 10\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${encodeURI(category)}&limit=${limit}`;\r\n    const resp = await fetch(url);\r\n\r\n    const { data } = await resp.json(resp);\r\n\r\n    return data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.original.url\r\n        }\r\n    })\r\n\r\n    \r\n}\r\n","import { GifGridItem } from './GifGridItem'\r\n\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n   \r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            { loading && <p>Loading...</p>}\r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n                    images.map(img => {\r\n                        return <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/GetGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [category])\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './AddCategory';\r\nimport { GifGrid } from './GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            {\r\n                categories.map(category =>\r\n                    <GifGrid\r\n                        key={category}\r\n                        category={category} />\r\n                )}\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./index.css\";\r\nimport { GifExpertApp } from './components/GifExpertApp';\r\n\r\nconst divRoot = document.querySelector(\"#root\");\r\n\r\nReactDOM.render(<GifExpertApp />, divRoot);"],"sourceRoot":""}